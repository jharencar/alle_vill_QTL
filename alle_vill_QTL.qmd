---
title: "alle_vill_QTL"
author: "Julia Harenčár"
execute:
  echo: true #will keep code chunks
  warning: false #removes warning functions
format:
  html:
    #makes long lines of code rap
    #makes table of contents
    #sets location of table of contents
    self-contained: true #makes one html file to render that is sharable
    page-layout: full #uses the full page
    code-fold: true #lets user fold up codes
    code-tools: true #makes an option in the upper left for users to reveal/hide all code and copy source code
    code-overflow: wrap
    toc: true
    toc-location: left
theme:
  #give light option
  #give dark option
  light: flatly
  dark: darkly
editor_options: 
  chunk_output_type: console
---

## QTL building for *C. allenii* x *C. villosissimus*

##### Load all packages:
```{r}
# loading packages etc
library(dplyr)
library(tidyr)
library(readr)
library(ggplot2)
library(patchwork)
theme_set(theme_bw())
library("DHARMa")
library("car")
library("lme4")
library("glmmTMB")
```

### Local ancestry
We conducted local ancestry assignment with aHMM from AncestryInfer (Schumer et al. 2020?). 

### LEP-MAP3 input file generation
See "generate_lepmap_input_files.R"

### Trait Data
#### Mapping population
All trait data are from F3s generated from the selfed seed of XX F2 parents. The F2 parent were grown in the greenhouse from seeds created by selfing a wild F1.

#### Cleaning/compiling
```{r}
# compiled_growth <- read.csv("data_cleaning/all_growth.csv")
# all_growth <- read.csv("data_cleaning/F3_alle_vill_growth.csv")
# merged_growth <- merge(compiled_growth, all_growth, by = "ID", all = TRUE)
# write.csv(merged_growth, "data_cleaning/merged_growth.csv", row.names = FALSE)
# 
# compiled <- read.csv("F3_alle_vill_compiled_traits.csv", header = T)
# LMA <- read.csv("data_cleaning/LMA.csv", header = T)
# merged_LMA <- merge(compiled, LMA, by = "ID", all = TRUE)
# write.csv(merged_LMA, "data_cleaning/merged_LMA.csv", row.names = FALSE)

#### Add in last batch of leaf N data ####
# lf_n <- read.csv("Leaf_N_last_batch.csv", header = T)
# 
# # start fixing IDs
# lf_n <- lf_n %>%
#   separate("Sample.ID", into = c("Sample_ID", "grn.dead"), sep = " ") %>% 
#   mutate(Sample_ID = gsub("-", "_", Sample_ID))
# 
# # write out for manual edits
# write.csv(lf_n, "data_cleaning/lf_n_last_batch_to_clean.csv", row.names = FALSE)
# 
# # re-import after ID cleanup
# lf_n <- read.csv("data_cleaning/lf_n_last_batch_to_clean_fixedIDs_dups_rmd.csv", header = T)
# 
# # Select only the columns of interest:
# new_n_long <- lf_n %>% select(ID,GREENvDEAD,N_wght_p,date)
# 
# # import the rest of the data and combine
# old_n_long <- read.csv("data_cleaning/clean_long_C_N.csv", header = T)
# comb_n_long <- full_join(new_n_long, old_n_long, by=c("ID", "GREENvDEAD","N_wght_p"))
# 
# # find and remove duplicates
# comb_n_long %>%
#   group_by(ID, GREENvDEAD) %>%
#   summarise(n = n(), .groups = "drop") %>%
#   filter(n > 1L) 
# 
# comb_n_long <- comb_n_long %>% 
#   filter(!(ID %in% c("165_009_14", "165_009_17", "165_009_172", "VILL_GG_0007_29", "VILL_GG_0007_69")))
# 
# # pivot wide to have one col per id with green and dead leaf nitrogen cols
# comb_n_wide <- comb_n_long %>%
#   pivot_wider(
#     id_cols = c("ID"),
#     names_from = c("GREENvDEAD"),
#     values_from = c("N_wght_p"),
#     names_sep = "_")
# 
# # write out for manual check and edits - addition of species name
# write.csv(comb_n_wide, "data_cleaning/full_lf_n_wide.csv", row.names = FALSE)
# 
# # Now we add it to the full dataset:
# compiled <- read.csv("F3_alle_vill_compiled_traits.csv", header = T)
# lf_n_clean <- read.csv("full_lf_n_wide_clean.csv", header = T)
# compiled_w_n <- full_join(compiled, lf_n_clean, by="ID")
# 
# # print to check
# write.csv(compiled_w_n, "data_cleaning/compiled_w_n_4cleaning.csv", row.names = FALSE)

#### Add in last batch of SPAD data ####
# last_spad <- read.csv("last_batch_SPAD.csv", header = T)
# 
# # convert to wide format:
# last_spad_wide <- last_spad %>% 
#   group_by(ID) %>% 
#   summarise(DD_date_start = first(DD_date_start),
#     PER1_start = first(PER1_start),
#     PER2_start = first(PER2_start),
#     Grn.SPAD_start = first(Grn.SPAD_start),
#     date_end = last(date_end),
#     PER1_end = last(PER1_end),
#     PER2_end = last(PER2_end),
#     Dry.SPAD_end = last(Dry.SPAD_end))
# 
# # add data to compiled
# compiled <- read.csv("F3_alle_vill_compiled_traits_miss_last_SPAD.csv", header = T)
# 
# compiled_w_ls_spad <- compiled %>%
#   left_join(last_spad_wide, by = "ID") %>% 
#   mutate(DD_date_start = coalesce(DD_date_start.x, DD_date_start.y),
#          PER1_start = coalesce(PER1_start.x, PER1_start.y),
#          PER2_start = coalesce(PER2_start.x, PER2_start.y),
#          Grn.SPAD_start = coalesce(Grn.SPAD_start.x, Grn.SPAD_start.y),
#          date_end = coalesce(date_end.x, date_end.y),
#          PER1_end = coalesce(PER1_end.x, PER1_end.y),
#          PER2_end = coalesce(PER2_end.x, PER2_end.y),
#          Dry.SPAD_end = coalesce(Dry.SPAD_end.x, Dry.SPAD_end.y)) %>% 
#   select(!matches("\\.x$|\\.y$"))
# 
# # print to check
# write.csv(compiled_w_ls_spad, "F3_alle_vill_compiled_traits.csv", row.names = FALSE)
```

#### Traits
```{r}
# read in data
compiled <- read.csv("F3_alle_vill_compiled_traits.csv", header = T)

# calculate growth rate in cm/day
compiled <- compiled %>% 
  mutate(GR_cm.dy = total_growth/GR.days)

# calculate Leaf Mass per Area (LMA)
compiled <- compiled %>% 
  mutate(lma = dry.g/area)

# calculate Leaf Dry Matter Content (LDMC)
compiled <- compiled %>% 
  mutate(ldmc = dry.g/wet.g)

# calculate average thickness
compiled <- compiled %>%
  mutate(ave_thick = rowMeans(select(.,thick.1, thick.2, thick.3)))

# calculate average toughness
compiled <- compiled %>%
  mutate(ave_tough = rowMeans(select(.,tough.1, tough.2, tough.3)))

# calculate N reabsorption
compiled <- compiled %>% 
  mutate(N_reabsorp = (1 - (N_wght_p_DEAD/N_wght_p_GREEN)) * 100)

# calculate chlorophyll reabsorption
compiled <- compiled %>% 
  mutate(chloro_reabsorp = (1 - (Dry.SPAD_end/Grn.SPAD_start)) * 100)

# # separate into alle, vill, and F3
# # ALLE
# ALLE_compiled <- compiled %>% 
#   filter(type == "ALLE")
# 
# # VILL
# VILL_compiled <- compiled %>% 
#   filter(type == "VILL")
# 
# # F3
# F3_compiled <- compiled %>% 
#   filter(type == "F3")

# make a simplified df of the F3 phenotypes to map in r/qtl
# convert cohort date into cohort number - easier format
for_r.qtl_F3phe <- compiled %>% 
  mutate(cohort = as.integer(factor(GR.M2.date))) %>% 
  filter(type == "F3") %>% 
  select("ID","parent", "cohort","days_to_radicle","GR_cm.dy","ldmc","ave_thick","ave_tough","N_reabsorp","chloro_reabsorp")

colnames(for_r.qtl_F3phe)[1] <- "FID"
  
FID_to_LID <- read.table("FieldID_to_LabID.txt", header = T)
hindex <- read.csv("hyb_index.csv", header = T)
family <- read.csv("parent_translate.csv", header = T)

for_r.qtl_F3phe <- left_join(for_r.qtl_F3phe, FID_to_LID)
for_r.qtl_F3phe <- left_join(for_r.qtl_F3phe, hindex)
for_r.qtl_F3phe <- left_join(for_r.qtl_F3phe, family, by ="parent")

# filter out individuals with no sequence data
miss_geno <- c("165_009B_117", "165_25_11")
for_r.qtl_F3phe <- for_r.qtl_F3phe %>% 
  filter(!FID %in% miss_geno, !family =="NA") %>% 
  select("LID","family", "hybrid_index","cohort","days_to_radicle","GR_cm.dy","ldmc","ave_thick","ave_tough","N_reabsorp","chloro_reabsorp") 
colnames(for_r.qtl_F3phe)[1] <- "ID"

# "onehot" encode factor covariates to include them in rqtl
# add "onehot" cols for family
for_r.qtl_F3phe_onehotcovar <- for_r.qtl_F3phe %>% 
  mutate(F21_238 = case_when(family == "21_238" ~ 1,
                             TRUE ~ 0),
         F21_259 = case_when(family == "21_259" ~ 1,
                             TRUE ~ 0),
         F21_241 = case_when(family == "21_241" ~ 1,
                             TRUE ~ 0),
         F21_284 = case_when(family == "21_284" ~ 1,
                             TRUE ~ 0),
         F21_232 = case_when(family == "21_232" ~ 1,
                             TRUE ~ 0))

# add "onehot" cols for cohort
for (i in unique(for_r.qtl_F3phe_onehotcovar$cohort)) {
  cohort_col_name <- paste0("coh", i)
 for_r.qtl_F3phe_onehotcovar <- for_r.qtl_F3phe_onehotcovar %>% 
  mutate(!!sym(cohort_col_name) := case_when(cohort == paste0(i) ~ 1,
                             TRUE ~ 0)) 
}

# rearrange the cols
for_r.qtl_F3phe_onehotcovar <- for_r.qtl_F3phe_onehotcovar %>% 
  select("ID","family","hybrid_index","cohort","F21_238","F21_259","F21_241","F21_284","F21_232","coh27","coh24","coh19","coh25","coh26","coh1","coh28","coh31","coh21","coh29","coh30","coh34","coh7","coh8","coh22","coh32","coh33","coh5","coh9","coh6","coh10","coh12","coh15","coh14","coh11","coh13","coh16","coh17","coh20","coh18","coh23","days_to_radicle","GR_cm.dy","ldmc","ave_thick","ave_tough","N_reabsorp","chloro_reabsorp")
  
write.table(for_r.qtl_F3phe_onehotcovar, "F3phe_onehotcovar.csv", quote = F, row.names = F, sep = ",")
```

We selected traits involved in divergent habitat adaptation for genetic mapping.
##### Seed Dormancy

```{r}
### Inspect seed dormancy data:
aggregate(compiled$days_to_radicle, list(compiled$type), FUN = function(x) mean(x, na.rm = TRUE)) 
#    ALLE  20.39474
#      F3  34.00248
#    VILL 137.25000

## ALLE
hist(ALLE_compiled$days_to_radicle, breaks =50)

# test for possibility of normal distribution
shapiro.test(ALLE_compiled$days_to_radicle) # def not normal; p = 2.005e-06

## PICKUP - check other distributuions - start with poisson? exponential? 
# QQ plots of different fits 
qqp(ALLE_compiled$days_to_radicle, "norm")
qqp(ALLE_compiled$days_to_radicle, "lnorm") 
shapiro.test(log(ALLE_compiled$days_to_radicle)) # still decidedly not normal... ; p-value = 0.0002
# Generate quantiles of a Poisson distribution with the same mean as your data
poisson_quantiles <- qpois(ppoints(length(ALLE_compiled$days_to_radicle)), lambda = mean(ALLE_compiled$days_to_radicle, na.rm = TRUE))
# Create the QQ plot
qqplot(poisson_quantiles, ALLE_compiled$days_to_radicle, xlab = "Theoretical Quantiles (Poisson)", ylab = "Sample Quantiles", main = "QQ Plot: Poisson Distribution")
# Add a reference line
abline(0, 1, col = "red") # doesn't line up well..

# VILL
hist(VILL_compiled$days_to_radicle, breaks =50)
shapiro.test(VILL_compiled$days_to_radicle) # crazy not normal; p = 1.461e-14

## F3
hist(F3_compiled$days_to_radicle, breaks =50)
shapiro.test(F3_compiled$days_to_radicle) # also super not normal; p < 2.2e-16 

### Plot together
#ggplot()
#PICKUP! - No F2 data, correct? bummer... 
dormancy <- ggplot(compiled, aes(x=type, y=days_to_radicle, fill=type)) +
  geom_violin() +
  stat_summary(fun.data = mean_cl_normal, geom = "pointrange", size = .3, show.legend = FALSE) +
  scale_fill_manual(values = c("VILL" = "#FFD700", "ALLE" = "#cc79a7", "F3" = "#56B4E9"),
                    labels = c(expression(italic("C. allenii")), expression(italic("F3")), expression(italic("C. villosissimus")))) +
  theme(legend.text.align = 0) +
  labs(x = NULL, y = "seed dormancy", fill = NULL)


# plot with white boxplots instead of mean and CI 
# ggplot(compiled, aes(x=type, y=days_to_radicle, fill=type)) +
#   geom_violin() +
#   geom_boxplot(width = 0.2, fill = "white", outlier.shape = NA) + 
#   scale_fill_manual(values = c("VILL" = "#FFD700", "ALLE" = "#cc79a7", "F3" = "#56B4E9"),labels = c(expression(italic("C. villosissimus")), expression(italic("C. allenii")), expression(italic("F3"))))

# save plot
ggsave("trait_plots/dormancy.pdf", dormancy, device = "pdf", units = "mm", width = 130, height = 110)

```

##### Growth Rate

```{r}
### Inspect growth rate data:
# getting un-transformed averages
aggregate(compiled$GR_cm.dy, list(compiled$type), FUN = function(x) mean(x, na.rm = TRUE)) 
#  ALLE 0.3436
#    F3 0.4888
#  VILL 0.5045

## ALLE
hist(ALLE_compiled$GR_cm.dy, breaks =20)
# test for possibility of normal distribution
shapiro.test(ALLE_compiled$GR_cm.dy) # probs normal; p = 0.4364

# VILL
hist(VILL_compiled$GR_cm.dy, breaks =20) # skewed... maybe investigate the unusual low vals - or don't worry bc not data in the analysis... 
shapiro.test(VILL_compiled$GR_cm.dy) # not normal; p = 0.0004607

## F3
hist(F3_compiled$GR_cm.dy, breaks =20)
shapiro.test(F3_compiled$GR_cm.dy) # probs normal; p = 0.5016
### Plot together
#ggplot()
#PICKUP! - No F2 data, correct? bummer... 
growth_rate <- ggplot(compiled, aes(x=type, y=GR_cm.dy, fill=type)) +
  geom_violin() +
  stat_summary(fun.data = mean_cl_normal, geom = "crossbar", width = 0.2, fill = "white") +
  scale_fill_manual(values = c("VILL" = "#FFD700", "ALLE" = "#cc79a7", "F3" = "#56B4E9"),
                    labels = c(expression(italic("C. villosissimus")), expression(italic("C. allenii")), expression(italic("F3")))) +
  theme(legend.text.align = 0)

# save plot
#ggsave("trait_plots/growth_rate.pdf", growth_rate , device = "pdf", units = "mm", width = 130, height = 110)

# quick t-test
AV <- compiled %>% filter(type != "F3")
t.test(AV$GR_cm.dy ~ AV$type, paired = F) # p-value = 2.101e-08

# look at cohort as a random effect and fixed to see vals
shapiro.test(F3_compiled$GR_cm.dy) # 0.4 - and it looks normal
simp <- lm(GR_cm.dy ~ GR.M2.date,
     data=F3_compiled)
summary(simp) # cohort definitely has important effect, with three particularly odd cohorts

# Whole dataset
more <- lmer(GR_cm.dy ~ type + (1 | GR.M2.date),
     data = compiled)
summary(more)

# Summary plot without promlematic cohorts:
GR_subset <- compiled %>% filter(!(GR.M2.date %in% c("8/22/22", "11/21/22", "11/28/22")))
# CONSIDER - removing 11/14 especially, and maybe 11/7 too - low vill values 

GR_subset_AV <- GR_subset %>% filter(type != "F3")
t.test(GR_subset_AV$GR_cm.dy ~ GR_subset_AV$type, paired = F) # difference becomes more pronounced without weird cohorts -> p-value = 6.361e-11
growth_rate_subset <- ggplot(GR_subset, aes(x=type, y=GR_cm.dy, fill=type)) +
  geom_violin() +
  stat_summary(fun.data = mean_cl_normal, geom = "pointrange", size = .3, show.legend = FALSE) +
  scale_fill_manual(values = c("VILL" = "#FFD700", "ALLE" = "#cc79a7", "F3" = "#56B4E9"),
                    labels = c(expression(italic("C. allenii")), expression(italic("F3")), expression(italic("C. villosissimus")))) +
  theme(legend.text.align = 0) +
  labs(x = NULL, y = "growth rate", fill = NULL)

# save plot
ggsave("trait_plots/growth_rate_subset.pdf", growth_rate_subset , device = "pdf", units = "mm", width = 130, height = 110)

# if high enough sample sizes, maybe just leave out those bad cohorts from trait distrubution figs/any analysis...? Then use all data in QTL, but include cohort as random effect!!!

compiled %>% filter(type == "ALLE" & !is.na(GR_cm.dy)) %>% nrow() # 38
GR_subset %>% filter(type == "ALLE" & !is.na(GR_cm.dy)) %>% nrow() # 38 (doesn't remove any?!)

compiled %>% filter(type == "VILL" & !is.na(GR_cm.dy)) %>% nrow() # 85
GR_subset %>% filter(type == "VILL" & !is.na(GR_cm.dy)) %>% nrow() # 78 (removes 7)

compiled %>% filter(type == "F3" & !is.na(GR_cm.dy)) %>% nrow() # 400
GR_subset %>% filter(type == "F3" & !is.na(GR_cm.dy)) %>% nrow() # 368 (removes 32)

# Yay! sounds fine to me to remove those dates for looking at trait distributions in parents v F3s!
```

##### Leaf Dry Matter Content
```{r}
### Inspect data:
# check 
# getting un-transformed averages
aggregate(compiled$lma, list(compiled$type), FUN = function(x) mean(x, na.rm = TRUE)) 
#    ALLE 0.004857662
#      BC 0.003831418
#      F3 0.004754916
#    VILL         NaN

## ALLE
hist(ALLE_compiled$lma, breaks =20)
# test for possibility of normal distribution
shapiro.test(ALLE_compiled$lma) # probs normalish; p = 0.06068

# VILL #PICKUP when I have the data
hist(VILL_compiled$lma, breaks =20) # 
shapiro.test(VILL_compiled$lma) # 

## F3
hist(F3_compiled$lma, breaks =20)
shapiro.test(F3_compiled$lma) # probs normal; p = 0.6598
### Plot together
#PICKUP! - No F2 data, correct?
LMA <- ggplot(compiled, aes(x=type, y=lma, fill=type)) +
  geom_violin() +
  stat_summary(fun.data = mean_cl_normal, geom = "crossbar", width = 0.2, fill = "white") +
  scale_fill_manual(values = c("VILL" = "#FFD700", "ALLE" = "#cc79a7", "F3" = "#56B4E9"),
                    labels = c(expression(italic("C. villosissimus")), expression(italic("C. allenii")), expression(italic("F3"))))
                    #,labels = c(expression(italic("C. villosissimus")), expression(italic("C. allenii")), expression(italic("F3"))))

# Doesn't look right at all, looks like no diff between alle and vill...
# FUUUUCK! crazy variable across cohorts... trash
shapiro.test(F3_compiled$lma) # 0.6 
simp <- lm(lma ~ GR.M2.date,
     data=F3_compiled)
summary(simp)

more <- lmer(lma ~ type + (1 | GR.M2.date),
     data = compiled)
summary(more)

############ looking at ldmc instead bc just weight measurements, not area
aggregate(compiled$ldmc, list(compiled$type), FUN = function(x) mean(x, na.rm = TRUE)) 

LDMC <- ggplot(compiled, aes(x=type, y=ldmc, fill=type)) +
  geom_violin() +
  stat_summary(fun.data = mean_cl_normal, geom = "pointrange", size = .3, show.legend = FALSE) +
  scale_fill_manual(values = c("VILL" = "#FFD700", "ALLE" = "#cc79a7", "F3" = "#56B4E9"),
                    labels = c(expression(italic("C. allenii")), expression(italic("F3")), expression(italic("C. villosissimus")))) +
  theme(legend.text.align = 0) +
  labs(x = NULL, y = "LDMC", fill = NULL)

# save plot
ggsave("trait_plots/LDMC.pdf", LDMC , device = "pdf", units = "mm", width = 130, height = 110)

simp <- lm(ldmc ~ GR.M2.date,
     data=F3_compiled)
summary(simp)

more <- lmer(ldmc ~ type + (1 | GR.M2.date),
     data = compiled)
summary(more)

# Maybe also consider leaf moisture - calculated as the difference between leaf fresh mass and leaf dry mass (mass of water) as a percent of leaf dry mass (%).

### area measurements are definitely the issue. 
```

##### Thickness
```{r}
# getting un-transformed averages
aggregate(compiled$ave_thick, list(compiled$type), FUN = function(x) mean(x, na.rm = TRUE))
#    ALLE 0.5282063
#      F3 0.4832129
#    VILL 0.4204000

# deparate data distributions 
hist(ALLE_compiled$ave_thick, breaks =20)
hist(VILL_compiled$ave_thick, breaks =20)
hist(F3_compiled$ave_thick, breaks =20)

# plot distributions together
thickness <- ggplot(compiled, aes(x=type, y=ave_thick , fill=type)) +
  geom_violin() +
  stat_summary(fun.data = mean_cl_normal, geom = "pointrange", size = .3, show.legend = FALSE) +
  scale_fill_manual(values = c("VILL" = "#FFD700", "ALLE" = "#cc79a7", "F3" = "#56B4E9"),
                    labels = c(expression(italic("C. allenii")), expression(italic("F3")), expression(italic("C. villosissimus")))) +
  theme(legend.text.align = 0) +
  labs(x = NULL, y = "thickness", fill = NULL)
```

##### Toughness
```{r}
# getting un-transformed averages
aggregate(compiled$ave_tough, list(compiled$type), FUN = function(x) mean(x, na.rm = TRUE))
#    ALLE 115.7063
#      F3 107.3429
#    VILL  31.3600

# deparate data distributions 
hist(ALLE_compiled$ave_tough, breaks =20)
hist(VILL_compiled$ave_tough, breaks =20)
hist(F3_compiled$ave_tough, breaks =20)

# plot distributions together
toughness <- ggplot(compiled, aes(x=type, y=ave_tough , fill=type)) +
  geom_violin() +
  stat_summary(fun.data = mean_cl_normal, geom = "pointrange", size = .3, show.legend = FALSE) +
  scale_fill_manual(values = c("VILL" = "#FFD700", "ALLE" = "#cc79a7", "F3" = "#56B4E9"),
                    labels = c(expression(italic("C. allenii")), expression(italic("F3")), expression(italic("C. villosissimus")))) +
  theme(legend.text.align = 0) +
  labs(x = NULL, y = "toughness", fill = NULL)
```

##### Senescence
To quantify senescence, we measured both leaf chlorophyll and nitrogen content before and after drought-induced leaf death. Mapping population hybrids grew for eight weeks in 1-gallon pots before we began the drought treatment. On the first day of no water, we recorded the average of three SPAD readings of chlorophyll content taken near the tip, middle, and base of the oldest healthy leaf blade. From the same leaf, we also collected six hole punches of leaf tissue from the same location as the SPAD readings, but on both sides of the leaf. We repeated the chlorophyll content measures and leaf hole punches when the leaf and the younger leaf above it were both fully dry and dead in appearance. We dried all leaf tissue immediately after collection at  60°C for 72 hours, then stored and shipped them in silica. Leaf nitrogen concentration was determined with an elemental analyzer at Chapman University and at the UC Davis Stable Isotope facility. We quantified chlorophyll and nitrogen reabsorption as:
1- (dead leaf content/green leaf content) x 100 = % leaf nitrogen or chlorophyll reabsorption. 

###### Leaf N reabsorption
```{r}
# getting un-transformed averages
aggregate(compiled$N_reabsorp, list(compiled$type), FUN = function(x) mean(x, na.rm = TRUE)) 
#    ALLE 35.71953
#      F3 35.66648
#    VILL 69.20421

# Values without latest batch from Davis:
#   ALLE 31.40997 
#     F3 35.92828 
#   VILL 68.57828 

# check out data distribution
hist(ALLE_compiled$N_reabsorp, breaks =20)
hist(VILL_compiled$N_reabsorp, breaks =20)
hist(F3_compiled$N_reabsorp, breaks =20)

### Plot together
N_reabsorption <- ggplot(compiled, aes(x=type, y=N_reabsorp , fill=type)) +
  geom_violin() +
  stat_summary(fun.data = mean_cl_normal, geom = "pointrange", size = .3, show.legend = FALSE) +
  scale_fill_manual(values = c("VILL" = "#FFD700", "ALLE" = "#cc79a7", "F3" = "#56B4E9"),
                    labels = c(expression(italic("C. allenii")), expression(italic("F3")), expression(italic("C. villosissimus")))) +
  theme(legend.text.align = 0) +
  labs(x = NULL, y = "%N reasorbed", fill = NULL)

# save plot
ggsave("trait_plots/N_reabsorption.pdf", N_reabsorption , device = "pdf", units = "mm", width = 130, height = 110)
```

###### Chlorophyll reabsorption
```{r}
# getting un-transformed averages
aggregate(compiled$chloro_reabsorp, list(compiled$type), FUN = function(x) mean(x, na.rm = TRUE))
#    ALLE 37.26016
#      F3 60.40523
#    VILL 91.91851

# deparate data distributions 
hist(ALLE_compiled$chloro_reabsorp, breaks =20)
hist(VILL_compiled$chloro_reabsorp, breaks =20)
hist(F3_compiled$chloro_reabsorp, breaks =20)

# plot distributions together
chloro_reabsorption <- ggplot(compiled, aes(x=type, y=chloro_reabsorp , fill=type)) +
  geom_violin() +
  stat_summary(fun.data = mean_cl_normal, geom = "pointrange", size = .3, show.legend = FALSE) +
  scale_fill_manual(values = c("VILL" = "#FFD700", "ALLE" = "#cc79a7", "F3" = "#56B4E9"),
                    labels = c(expression(italic("C. allenii")), expression(italic("F3")), expression(italic("C. villosissimus")))) +
  theme(legend.text.align = 0) +
  labs(x = NULL, y = "chlorophyll reabsorbed", fill = NULL)

# save plot
# ggsave("trait_plots/chloro_reabsorption.pdf", chloro_reabsorption, device = "pdf", units = "mm", width = 130, height = 110)
```

#### Trait panel plot
```{r}
# assemble trait plots into a panel
trait_panel <- dormancy + growth_rate_subset + thickness + toughness +
  N_reabsorption + chloro_reabsorption + guide_area() +
  plot_layout(ncol = 4) +
  plot_layout(guides = 'collect')

ggsave("trait_plots/trait_panel.pdf", trait_panel, device = "pdf", units = "mm", width = 180, height = 100)
```

